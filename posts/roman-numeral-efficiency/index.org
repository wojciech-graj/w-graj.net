#+TITLE: How Efficient are Roman Numerals?
#+DATE: 2025-07-10
#+BIBLIOGRAPHY: references.bib
#+CITE_EXPORT: csl ../../ieee.csl

Roman numerals are among the oldest numeral systems, and are arguably the oldest system that still sees widespread contemporary use. But how efficient is it compared to our modern positional systems, like the decimal system that almost everyone uses on a daily basis? And how does it stack up against other ancient numeral systems?

* Historical Context
Virtually all modern numeral systems are positional, meaning that the position of every digit within the number dictates the power to which it is raised. Positional systems can be distinguished by their base, or how many distinct values each digit can have. The decimal system has a base of 10 (0-9), while binary has a base of 2 (0, 1). Positional numerical systems have a history dating back to Babylonia, where a base-60 system was invented around 2000 BCE [cite:@Chrisomalis_2010 p. 247]. However, positional systems didn't get a proper foothold until the invention of the Indian decimal system around the 1^{th}-4^{th} century, and its spread to the Islamic world in the 9^{th} century [cite:@Brezina_2006], and medieval Europe in the 13^{th} century [cite:@FiguringOut].

Non-positional systems were the dominant numeral systems in antiquity, and were used by civilizations ranging from the Greeks or Romans, to the Etruscans and Armenians. In non-positional systems, the absolute position of digits in numbers doesn't influence their value, although the relative positions of digits can still be relevant ($\text{IV}\neq\text{VI}$ in Roman numerals).

* Types of Non-Positional Numeral Systems
There are three main categories of non-positional numeral systems that this article will focus on, although [[#sec:annexa][Annex A]] contains a brief discussion of others.

** Egyptian Numerals
Egyptian numerals, dating back to around 3000 BC, belong to the simplest systems mentioned in this article. Each hieroglyph denotes a power of 10, and you simply sum all of the numerals in a number to obtain its value [cite:@Egyptian]. For example, $\text{𓎆𓎆𓏤𓏤}=10+10+1+1=22$.

#+CAPTION: Egyptian numerals
#+ATTR_HTML: :border 2 :rules all :frame border
| <l>        | <c> | <c> | <c> |  <c>  |  <c>   |   <c>   |    <c>    |
| Value      |  1  | 10  | 100 | 1 000 | 10 000 | 100 000 | 1 000 000 |
|------------+-----+-----+-----+-------+--------+---------+-----------|
| Hieroglyph |  𓏤  |  𓎆  |  𓍢  |   𓆼   |   𓂭    |   𓆐    |    𓁨     |

Etruscan numerals, a system that some scholars believe to be a precursor to Roman numerals, is based around the same idea, but uses the following symbols [cite:@Etruscan].

#+CAPTION: Etruscan numerals
#+ATTR_HTML: :border 2 :rules all :frame border
| <l>   | <c> | <c> | <c> | <c> | <c> |
| Value |  1  |  5  | 10  | 50  | 100 |
|-------+-----+-----+-----+-----+-----|
| Digit |  𐌠  | 𐌡  | 𐌢  | 𐌣  | 𐌟  |

** Greek Numerals
Greek Numerals, likely dating back to around the 5^{th} century BC, use a unique letter for each base-10 digit in each unique position. This allows every 1-digit number to be expressed with one letter, every 2-digit number with 2 letters, and so forth. Greek numerals have symbols up to 900 000, allowing all 6 digit decimal numbers to be represented [cite:@Greek]. For example, $\text{ΔʹϞʹ}=4+90=94$.

#+CAPTION: Greek numerals
#+ATTR_HTML: :border 2 :rules all :frame border
| <l>   | <c> | <c> | <c> | <c> | <c> |  <c>   | <c> | <c> | <c> | <c> | <c> | <c> | <c> | <c> | <c> |    | <c> | <c> |
| Value |  1  |  2  |  3  |  4  |  5  |   6    |  7  |  8  |  9  | 10  | 20  | 30  | 40  | 50  | 60  | 70 | 80  | 90  |
|-------+-----+-----+-----+-----+-----+--------+-----+-----+-----+-----+-----+-----+-----+-----+-----+----+-----+-----|
| Digit | Αʹ  | Βʹ  | Γʹ  | Δʹ  | Εʹ  | Ϛʹ, ΣΤʹ | Ζʹ  | Ηʹ  | Θʹ  |  Ιʹ  | Κʹ  | Λʹ  | Μʹ  | Νʹ  | Ξʹ  | Οʹ | Πʹ  | Ϟʹ  |

Many other numeral systems operate on the same principle, including the Abjad, Armenian, Cyrillic, Coptic, Glagotic, and Gothic numeral systems, which all differ in the number of decimal digits they can express, and their alphabet. [cite:@Chrisomalis_2010]

*** Ethiopic Numerals
Ethiopic numerals are similar to Greek numerals, but express numbers $\geq200$ differently, as the number is split into powers of 100. For example, 375 is written ፫፻፸፭ ($3\times100+70+5$), and 12345 is ፼፳፫፻፵፭ ($10000+\left(20+3\right)\times100+40+5$).

** Roman Numerals
Roman numerals operate similarly to Egyptian numerals, but try to minimize the number of characters used to represent numbers, by replacing patterns in which a digit is repeated fourfold with a shorter sequence. For example, $\text{IIII}$ becomes $\text{IV}$, and $\text{VIIII}$ becomes $\text{IX}$.

#+CAPTION: Roman numerals
#+ATTR_HTML: :border 2 :rules all :frame border
| <l>   | <c> | <c> | <c> | <c> | <c> | <c> |  <c>  |
| Value |  1  |  5  | 10  | 50  | 100 | 500 | 1 000 |
|-------+-----+-----+-----+-----+-----+-----+-------|
| Digit |  I  |  V  |  X  |  L  |  C  |  D  |   M   |

Roman numerals use a concise set of digits, and as such, are unable to express larger numbers. The $\text{M}$ digit was introduced in the middle ages to allow for numbers up to 3 999, but ancient Romans were limited to 899 [cite:@Chrisomalis_2010, pp. 102-109]. A few methods arose to tackle this limitation.

*** Apostrophus
The Apostrophus method is based on adding more digits and digit combinations to denote larger numbers, and has origins in the Etruscan numeral system [cite:@RomanApostrophus]. The legibility of large numbers is significantly hampered by the complexity of the larger digits.

#+CAPTION: Roman numerals (Apostrophus)
#+ATTR_HTML: :border 2 :rules all :frame border
| <l>             | <c> | <c> | <c> | <c> | <c> | <c> |   <c>    |  <c>  |  <c>   |  <c>   |   <c>    |
| Value           |  1  |  5  | 10  | 50  | 100 | 500 |  1 000   | 5 000 | 10 000 | 50 000 | 100 000  |
|-----------------+-----+-----+-----+-----+-----+-----+----------+-------+--------+--------+----------|
| Digit           |  I  |  V  |  X  |  L  |  C  | IↃ |   CIↃ   | IↃↃ  | CCIↃↃ | IↃↃↃ  | CCCIↃↃↃ |
| Digit (Compact) |  I  |  V  |  X  |  L  |  C  |  D  | ↀ[fn:1] |  ↁ   |   ↂ   |   ↇ   |    ↈ    |

[fn:1] Some speculate that John Wallis, in introducing the symbol for infinity (∞), was inspired by ↀ, which often represented arbitrary large numbers.

*** Vinculum
Vinculum avoids adding additional characters by allowing an overline to be added to a subset of the digits, to denote that their values should be multiplied by 1 000 [cite:@Ifrah]. For example, $\overline{\text{XII}}=12\cdot1000=12000$, and $\overline{\text{I}}\text{I}=1\cdot1000+1=1001$.

* The Efficiency Metric
While comparing the number of digits in various numbers across the various non-decimal numeral systems, this metric is biased favorably towards systems that have a large alphabet, since you can generally express more information in fewer digits with a larger alphabet. As such, we introduce an information-theoretic efficiency metric $E_\textbf{N}(n)$ for alphabet $\textbf{N}$ and number $n$.

Informally, consider how 4 can only be written as $4_{10}$ in decimal or $100_2$ in binary, but both $\text{IV}$ and $\text{IIII}$ represent it in Roman numerals (although only one is considered valid). The efficiency of Roman numerals is decreased because the permutation of digits $\textbf{IIII}$ is wasted, when it could represent a different unique number. As such, a numeral system with the highest efficiency would have a unique way to represent any number, and would not waste any permutations of digits.

To calculate the efficiency, consider the following example. Each digit in the Etruscan system requires 3 bits to represent a single digit[fn::Technically only 2.25 binary digits are required for each Etruscan numeral, since 101, 110, and 111 are unused and could be used for the next digit. This is accounted for in the results and equation, but would be more difficult to explain.]. Using the below table in which each digit is assigned a unique binary representation, $6_{10}=\text{𐌡𐌠}_\textbf{E}=001000_{2,\textbf{E}}$, so the decimal 6 requires 6 bits to store as an Etruscan numeral. However, its binary representation is $110_2$, which only has 3 digits. As such, $E_\textbf{E}(6)\approx\frac{3}{6}\approx0.5$.

#+CAPTION: Etruscan numeral digit binary representation.
#+ATTR_HTML: :border 2 :rules all :frame border
| Digit                 | 𐌠   | 𐌡   | 𐌢   | 𐌣   | 𐌟   |
|-----------------------+-----+-----+-----+-----+-----|
| Binary Representation | 000 | 001 | 010 | 011 | 100 |

The below formula provides a formal definition for the efficiency function. $\left|\textbf{N}\right|$ represents the size of the alphabet, and $\text{len}_\textbf{N}(n)$ is the length of $n$ in digits in numeral system $N$.

#+BEGIN_LATEX
\begin{equation*}
E_\textbf{N}\left(n\right)=\frac{\ln\left(n\right)}{\ln\left(\left|\textbf{N}\right|\right)\text{len}_\textbf{N}\left(n\right)}
\end{equation*}
#+END_LATEX

An unfortunate limitation of the efficiency metric is that the efficiency of a numeric system as a whole should be calculated as the mean of the efficiencies of each value in its domain $\textbf{D}=\{1,2,3,...\}$, which can be computationally costly.

#+BEGIN_LATEX
\begin{equation*}
E_\textbf{N}=\frac{1}{|\textbf{D}|}\sum_{n\in \textbf{D}}E_\textbf{N}\left(n\right)
\end{equation*}
#+END_LATEX

For the most commonly-used numbers, cardinal numbers (one, two, ...), all bases of a positional system are equally efficient given a large enough number, as $\lim_{n\to\infty}E_\textbf{N}(n)=1$, $E_\textbf{N}=1$ for all positional $\textbf{N}$.

* Results
The length-related metrics will be relevant if your goal is finding the system that will require the least digits to express any number, while the efficiency-related metrics can be seen as estimating how many of the total ways to order the system's digits are actually used to express valid numbers, or the information-density of the system.

** Length

Figure [[fig:cml1000000]] shows the average length of numbers in digits in the various numeral systems for values $\leq1000000$. Note that the x axis is non-linear. As can be seen, all Greek-based systems actually outperform the decimal system on average for $n>9$, as they omit 0 digits. All Roman systems produce equally long numbers, apart from the non-compact Apostrophus method as it uses multiple digits to represent larger powers of 10, and are longer than Greek and Decimal systems. Finally, despite its simplicity, the Egyptian system outperforms the far more complex non-compact Roman Apostrophus method in the long run, despite being thousands of years more recent.

#+CAPTION: Mean length of all numbers less than $n$ for $n\leq1000000$
#+NAME: fig:cml1000000
[[./cum_mean_length_1000000.svg]]

#+CAPTION: Shortest numeral systems for uniform numbers up to maximum
#+ATTR_HTML: :border 2 :rules all :frame border
|             <r> | <l>                                                |
|     Maximum $n$ | Best Mean Length                                   |
|-----------------+----------------------------------------------------|
|             199 | Gothic, Greek, Cyrillic, Abjad, Armenian, Ethiopic |
|             999 | Gothic, Greek, Cyrillic, Abjad, Armenian           |
|           1 999 | Greek, Cyrillic, Abjad, Armenian                   |
|         999 999 | Greek, Cyrillic, Armenian                          |
|      99 999 999 | Cyrillic, Armenian                                 |
| 999 999 999 999 | Cyrillic                                           |

** Efficiency

Figure [[fig:cme1000000]] shows the average efficiency of the various numeral systems for values $\leq1000000$. As with the previous graph, note that the x axis is non-linear. Various systems trade blows for numbers up to 19, after which the Ethiopic system takes the lead until 999, after which the Gothic, Abjad, and Roman systems all have their time in the spotlight. At 2 789 the Ethiopic system becomes most efficient, leading until 19 306. It's interesting to note that the efficiency of the decimal system tends to 1, while the non-positional systems all either plateau or exhaust their domain before being able to do so.

#+CAPTION: Mean Efficiency of All Numbers Less than $n$ for $n\leq1000000$
#+NAME: fig:cme1000000
[[./cum_mean_efficiency_1000000.svg]]

#+CAPTION: Most efficient numeral systems for numbers up to maximum
#+ATTR_HTML: :border 2 :rules all :frame border
|             <r> | <l>                  |
|     Maximum $n$ | Best Mean Efficiency |
|-----------------+----------------------|
|              19 | Various              |
|             306 | Ethiopic             |
|             999 | Gothic               |
|           1 999 | Abjad                |
|           2 788 | Roman                |
|          19 306 | Ethiopic             |
|         999 999 | Greek                |
|      99 999 999 | Armenian             |
| 999 999 999 999 | Cyrillic             |

* Conclusion
Are Roman numerals efficient? In short: not particularly. If you're aiming to minimize the length of the number, Greek-based numeral systems consistently outperform Roman numerals, and Roman numerals are only most efficient for ranges of numbers that end between 2 000 and 2 788. But the efficiency of a numeral system is only one measure of its value, and what Roman numerals lack in information-density, they compensate for with their cultural status and visual distinctiveness, exemplified by their continued survival into the present day.

-----

* Annex A: Other Non-Positional Numeral Systems
:PROPERTIES:
:CUSTOM_ID: sec:annexa
:END:
While I tried to cover the most common non-positional numeral systems, I excluded a few due to their complexity. Hebrew numerals employ a Greek-based system until 1000, at which point they only have digits for 2000, 5 000, 10 000, and 100 000. Anania Shirakatsi, a 7^{th} century Armenian philosopher invented his own numeral system which manages to have only 12 symbols with the majority of them being for the digits 1-9 by being multiplicative-additive like the Ethiopic system. [cite:@Chrisomalis_2010]

Furthermore, Greek and Coptic numerals are identical apart from their differing alphabets, as are Gothic and Glagotic numerals [cite:@Chrisomalis_2010].

* Annex B: Beating Binary
It is impossible for a numeral system to have a mean efficiency $E_\text{N}>1$, however certain individual values can exceed 1. For example, the Roman L requires 3 bits to represent as a Roman numeral, however its binary representation needs a whole 6 bits, yielding $E_\textbf{R}(50)=\frac{6}{3}=2$. If you expected your dataset to mostly contain 50, you would actually be better off with Roman numerals than with any positional system![fn::Although it goes without saying that a variable-length binary encoding tailored towards the specific dataset will outperform Roman numerals in such a situation. See [[https://en.wikipedia.org/wiki/Huffman_coding][Huffman Coding]].]

* Annex C: The Cyrillic Numeral System
The Cyrillic system is particularly interesting due to the sheer size of the numbers that can be represented. In the same way that each digit can be multiplied by 1 000 in the Roman Vinculum system, the Cyrillic system has 7 such multipliers, up to 1 000 000 000. Furthermore, there exists a variant of the Cyrillic system (the Greater Count, as opposed to the previously described Lesser Count), where the largest multiplier has a value of $10^{50}$.

Even though Western numerals were known in Russia in the 17^{th} century, the Cyrillic numeral system was adequate for the time, and was only replaced in the early 18^{th} century once technical training in mathematics by Western scholars was introduced [cite:@Chrisomalis_2010 pp. 180-182]. Cyrillic numerals appeared on freshly-minted coins until 1725! [cite:@Coins]

-----

* Bibliography

#+PRINT_BIBLIOGRAPHY:
